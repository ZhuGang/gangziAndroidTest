<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
"-//Puppy Crawl//DTD Check Configuration 1.2//EN"
"http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
<module name="Checker">
	<!-- 重复代码的检查，超过8行就认为重复，UTF-8格式 本检查一定要放在"TreeWalker"节点前，否则在 Checkclipse中会无法使用。(在ant下可以) -->

	<!-- 文件长度不超过1500行 -->
	<module name="FileLength">
		<property name="max" value="1500" />
	</module>
	<module name="TreeWalker">
		<!-- 1.命名方面的检查，它们都使用了Sun官方定的规则。 -->
		<!-- 包名的检查 -->
		<module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
		</module>
		<!-- 类名(class 或interface) 的检查 -->
		<module name="TypeName" />
		<!-- 变量的检查 -->
		<module name="MemberName" >
			<property name="format" value="^m[A-Z][a-zA-Z0-9]*$" />
		</module>
		<module name="LocalVariableName">
			<property name="format" value="^_[A-Z][a-zA-Z0-9]*$"/>
		</module>

		<!-- 方法名的检查 -->
		<module name="MethodName" />
		<!-- 方法的参数名 -->
		<module name="ParameterName " >
			<!--<property name="format" value="^p[A-Z][a-zA-Z0-9]*$" />-->
		</module>
		<!-- 常量名的检查 -->
		<module name="ConstantName" />

		<!-- 2.代码格式的检查 -->
		<!-- 确保一个类有package声明 -->
		<module name="PackageDeclaration" />
		<!-- 申明的顺序 -->
		<module name="DeclarationOrder" />
		<!-- 关键字的顺序 -->
		<module name="ModifierOrder" />
		<!-- 缩进 -->
		<module name="Indentation" />
		<!--行数检查 -->

		<!-- 所有区域都要使用大括号。 -->
		<module name="NeedBraces" />
		<!-- 同一行不能有多个声明 -->
		<module name="MultipleVariableDeclarations" />
		<!-- 每行至多包含一条语句 -->
		<module name="OneStatementPerLine" />
		<!-- 对区域的检查 -->
		<!-- 不能出现空白区域 -->
		<module name="EmptyBlock" />

		<!-- 空语句检查 -->
		<module name="EmptyStatement" />
		<!-- 不许使用与代码同行的注释 -->
		<module name="TrailingComment" />

		<!-- {}位置检查 -->
		<module name="LeftCurly" />

		<module name="RightCurly" />
		<!-- 方法名紧跟圆括号 -->
		<module name="MethodParamPad" />
		<!-- 强制转型后应该跟一个空格 -->
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI, TYPECAST" />
		</module>
		<!-- for语句中的表达式应该被空格分开 -->
		<module name="EmptyForInitializerPad">

		</module>
		<!-- import检查 -->
		<module name="AvoidStarImport" />
		<module name="UnusedImports" />
		<!-- 多余的关键字 -->
		<module name="RedundantModifier" />

		<!-- 多余的括号 -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true" />
		</module>

		<!-- 3.javadoc注释的检查 -->
		<!-- 检查所有的interface和class -->
		<module name="JavadocType" />
		<!-- 检查所有方法的javadoc，可以不声明RuntimeException -->
		<module name="JavadocMethod">
			<property name="allowUndeclaredRTE" value="true" />
			<property name="allowMissingParamTags" value="true"/>
			<property name="allowMissingThrowsTags" value="true"/>
			<property name="allowMissingReturnTag" value="true"/>
		</module>
		<!-- 检查某个变量的javadoc -->
		<!--<module name="JavadocVariable" />-->


		<!-- 4.编程复杂度检查 -->
		<!-- 每行不超过120个字 -->
		<module name="LineLength">
			<property name="max" value="120" />
		</module>
		<!-- 方法不超过30行 -->
		<module name="MethodLength">
			<property name="tokens" value="METHOD_DEF" />
			<property name="max" value="50" />
		</module>
		<!-- 方法的参数个数不超过4个。 -->
		<module name="ParameterNumber">
			<property name="max" value="4" />
		</module>
		<!-- 各种量度 -->
		<!-- 布尔表达式的复杂度，不超过3 -->
		<module name="BooleanExpressionComplexity">
			<property name="max" value="3" />
		</module>

		<!-- 类数据的抽象耦合，一个类中建立的其他类的实例的个数不能超过7个 -->
		<module name="ClassDataAbstractionCoupling" />
		<!-- 类的分散复杂度，一个类依靠的其他类的个数不能超过20个 -->
		<module name="ClassFanOutComplexity" />
		<!-- 函数的分支复杂度，确保函数的分支复杂度没有超出限制一般而言1-4 是优秀，5-7是合格。8-10看情况重构。11个以上一定要马上重构！ -->
		<module name="CyclomaticComplexity">
			<property name="max" value="10" />
		</module>
		<!-- NPath复杂度，不超过200 NPATH 量度计算了一个函数的可执行的分支个数。它很重视条件语句的嵌套和多个部分组成的 -->
		<module name="NPathComplexity" />
		<!-- if最多嵌套3层 -->
		<module name="NestedIfDepth">
			<property name="max" value="3" />
		</module>
		<!-- try最多被嵌套1层 -->
		<module name="NestedTryDepth" />
		<!-- 一个方法中最多有3个return -->
		<module name="ReturnCount">
			<property name="max" value="3" />
		</module>

		<!-- 5.编码方面的检查 -->
		<!-- 不要把实例或类变量声明为公有 -->
		<module name="VisibilityModifier" />
		<!-- 隐藏工具类的构造方法，确保只有static方法的工具类没有public的构造方法 -->
		<module name="InnerAssignment" />
		<module name="HideUtilityClassConstructor">
			<property name="severity" value="warning" />
		</module>
		<!-- 检查未改变过的局部变量是否声明为final -->
		<!--<module name="FinalLocalVariable" />-->
		<!-- String的比较不能用!= 和 == -->
		<module name="StringLiteralEquality" />
		<!-- 不许使用未被简化的布尔返回值 -->
		<module name="SimplifyBooleanReturn" />
		<!-- 不许使用未被简化的条件表达式 -->
		<module name="SimplifyBooleanExpression" />

		<!-- 每个类都实现了equals()和hashCode() -->
		<module name="EqualsHashCode" />
		<!-- 不许内部赋值 -->
		<module name="InnerAssignment" />
		<!-- 循环控制变量不能被修改 -->
		<module name="ModifiedControlVariable" />
		<!-- clone方法必须调用了super.clone() -->
		<module name="SuperClone" />
		<!-- finalize 必须调用了super.finalize() -->
		<module name="SuperFinalize" />
		<!-- 不能catch java.lang.Exception -->
		<module name="IllegalCatch">
			<property name="illegalClassNames" value="java.lang.Exception" />
		</module>
		<!-- 不许对方法的参数赋值 -->
		<module name="ParameterAssignment" />
		<!-- 绝对不能容忍魔法数 -->
		<module name="MagicNumber" />
		<!-- 不许有同样内容的String -->
		<module name="MultipleStringLiterals" />
		<!-- 检查未改变过的局部变量是否声明为final。 -->
		<!--<module name=" FinalLocalVariable" />-->
	</module>
</module>